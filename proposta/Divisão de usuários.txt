#https://chatgpt.com/share/67f7fb61-42a0-8006-badd-d5cc69ccf7bd

################################# Testar 3 tipos de usuÃ¡rios #################################################

# Tipo de usuÃ¡rio	                                                is_superuser	is_staff
# SuperusuÃ¡rio	                                                    True	        True
# FuncionÃ¡rio com acesso ao admin (mas sem todas permissÃµes)	    False	        True
# UsuÃ¡rio comum	                                                    False	        False

#   1. SuperusuÃ¡rio (is_superuser=True, is_staff=True)
#     ğŸ”’ PermissÃµes:
#     Acesso total ao painel admin
#     Pode ver, editar, excluir e criar qualquer objeto de qualquer app
#     Ignora todas as regras de permissÃµes (tem acesso irrestrito)
#     Pode criar outros usuÃ¡rios, grupos, permissÃµes, etc.    
#     ğŸ“Œ Ideal para: Desenvolvedores ou administradores do sistema

#   2. FuncionÃ¡rio com acesso ao admin (is_superuser=False, is_staff=True)
#       ğŸ”’ PermissÃµes:
#       Pode acessar o painel admin do Django
#       SÃ³ pode ver/editar o que tiver permissÃ£o atribuÃ­da (diretamente ou via grupo)
#       Pode ser limitado a apenas ver certos modelos, ou editar apenas alguns campos
#       ğŸ“Œ Ideal para: Colaboradores, moderadores, secretÃ¡rios, professores, etc.

#   3. UsuÃ¡rio comum (is_superuser=False, is_staff=False)
#       ğŸ”’ PermissÃµes:
#       NÃ£o pode acessar o painel admin
#       Pode usar apenas as funcionalidades da aplicaÃ§Ã£o (site ou API) que vocÃª permitir
#       Normalmente usado para login em Ã¡reas pÃºblicas ou privadas do seu sistema, como clientes ou alunos
#       ğŸ“Œ Ideal para: UsuÃ¡rios finais, como alunos, clientes, etc.

#   Dica prÃ¡tica:
#       Se quiser restringir certas views, vocÃª pode usar esses campos assim:

#       if request.user.is_staff:
#           # Mostrar opÃ§Ãµes administrativas

# ou no decorator:
#   from django.contrib.admin.views.decorators import staff_member_required

#   @staff_member_required
#   def view_admin(request):
#     ...

class CriarUsuarioAPIView(APIView):
    def post(self, request):
        username = request.data.get('username')
        email = request.data.get('email')
        password = request.data.get('password')

        if not username or not password:
            return Response({'erro': 'UsuÃ¡rio e senha obrigatÃ³rios'}, status=status.HTTP_400_BAD_REQUEST)

        if User.objects.filter(username=username).exists():
            return Response({'erro': 'UsuÃ¡rio jÃ¡ existe'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            is_staff=False,
            is_superuser=False
        )

        return Response({'mensagem': 'UsuÃ¡rio criado com sucesso!'}, status=status.HTTP_201_CREATED)